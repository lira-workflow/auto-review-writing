import re
import tiktoken


def count_tokens(string: str, encoding_name: str = "gpt-4o-mini") -> int:
    """
    Calculates the number of tokens a prompt uses.

    Parameters:
    string - the string to count the length of.
    encoding_name - the model name used for encoding.

    Returns:
    the length of the string in tokens.
    """

    encoding = tiktoken.encoding_for_model(encoding_name)
    num_tokens = len(encoding.encode(string))

    return num_tokens


def check_token_count(
    string: str,
    encoding_name: str = "gpt-4o-mini",
    token_limit: int = 128_000,
    verbose: bool = False,
) -> bool:
    """
    Checks if the number of tokens exceeds a certain pre-defined amount.

    Parameters:
    string - the string to count the length of.
    encoding_name - the model name used for encoding.
    token_limit - the number of tokens to use as a limit.
    The default value is the input context window of ChatGPT 4o (and 4o-mini).
    verbose - whether to print if the limit is exceeded.

    Returns:
    True if the `token_limit` is exceeded, else False.
    """

    if count_tokens(string, encoding_name=encoding_name) > token_limit:
        if verbose:
            print(f"The number of tokens exceeds {token_limit}!")

        return True

    return False


def check_length(
    string: str,
    max_len: int = 1_048_576,
    verbose: bool = False,
) -> bool:
    """
    Checks if the number of tokens exceeds a certain pre-defined amount.

    Parameters:
    string - the string to count the length of.
    token_limit - the string length to use as a limit.
    The default value is the input context window of ChatGPT 4o (and 4o-mini).
    verbose - whether to print if the limit is exceeded.

    Returns:
    True if the `max_len` is exceeded, else False.
    """

    if len(string) > max_len:
        if verbose:
            print(f"The string length exceeds {max_len}!")

        return True

    return False


def clean_review(text: str) -> str:
    """
    Cleans up the reviews generated by the baseline method.

    Parameters:
    text - the literature review outputted by the na√Øve baseline generation.

    Returns:
    the cleaned text
    """

    text = re.sub("title:\s?", "", text, flags=re.IGNORECASE)
    text = re.sub("abstract:\s?", "", text, flags=re.IGNORECASE)
    text = re.sub(r"section \d+:\s?", "", text, flags=re.IGNORECASE)
    text = re.sub("conclusion:\s?", "Conclusion\n\n", text, flags=re.IGNORECASE)
    text = re.sub("\n\n\n", "\n", text)
    return text
